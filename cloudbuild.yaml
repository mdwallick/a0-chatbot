steps:
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "--build-arg=AUTH0_DOMAIN=${_AUTH0_DOMAIN}"
      - "--build-arg=AUTH0_CLIENT_ID=${_AUTH0_CLIENT_ID}"
      - "--build-arg=APP_BASE_URL=${_APP_BASE_URL}"
      - "--build-arg=AUTH0_CLIENT_SECRET"
      - "--build-arg=AUTH0_SECRET"
      - "--tag=gcr.io/$PROJECT_ID/${_REPO_NAME}/app:${COMMIT_SHA}"
      - "."
    secretEnv:
      - "AUTH0_CLIENT_SECRET"
      - "AUTH0_SECRET"

substitutions:
  _AUTH0_DOMAIN: "genai.atko.rocks"
  _AUTH0_CLIENT_ID: "hTJH2emvkQTtAntzfzwXJ1EewJZNesL5"
  _APP_BASE_URL: "https://chatbot.atko.rocks"
  _REPO_NAME: "cloudbuild"
  COMMIT_SHA: "manual"

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/a0-chatbot-client-secret/versions/latest
      env: "AUTH0_CLIENT_SECRET"
    - versionName: projects/$PROJECT_ID/secrets/a0-chatbot-encrypt-secret/versions/latest
      env: "AUTH0_SECRET"

images:
  - "gcr.io/$PROJECT_ID/${_REPO_NAME}/app:${COMMIT_SHA}"
# # cloudbuild.yaml
# steps:
#   - name: "gcr.io/cloud-builders/docker"
#     args:
#       - "build"
#       # --- Pass Non-Secret Environment Variables as Build ARGs ---
#       # These values come from the 'substitutions' section below.
#       # Your Dockerfile must declare corresponding ARGs (e.g., ARG OPENAI_MODEL).
#       - "--build-arg"
#       - "AUTH0_DOMAIN=${_AUTH0_DOMAIN}"
#       - "--build-arg"
#       - "AUTH0_CLIENT_ID=${_AUTH0_CLIENT_ID}"
#       - "--build-arg"
#       - "APP_BASE_URL=${_APP_BASE_URL}"

#       # --- Pass Secret-Derived Environment Variables as Build ARGs ---
#       # Your Dockerfile must declare corresponding ARGs (e.g., ARG OPENAI_API_KEY).
#       # The values for these ARGs will come from the 'secretEnv' mapping below.
#       - "--build-arg"
#       - "AUTH0_CLIENT_SECRET"
#       - "--build-arg"
#       - "AUTH0_SECRET"

#       # --- Docker build options ---
#       - "--tag"
#       # This tag is primarily for Cloud Build's internal reference during the build.
#       # When using "gcloud run deploy --source .", Cloud Run will manage the final image
#       # destination and tagging (e.g., REGION-docker.pkg.dev/PROJECT_ID/cloud-run-source-deploy/SERVICE_NAME:COMMIT_SHA).
#       - "gcr.io/$PROJECT_ID/$REPO_NAME/app:${COMMIT_SHA}" # Example internal tag for Cloud Build
#       - "." # Docker build context (current directory)
#     secretEnv:
#       # This makes the secrets (defined in 'availableSecrets' below) available as
#       # environment variables to THIS BUILD STEP's execution environment.
#       # The 'docker build --build-arg VAR_NAME' command can then pick up VAR_NAME
#       # from this step's environment if VAR_NAME is listed in secretEnv.
#       - "AUTH0_CLIENT_SECRET"
#       - "AUTH0_SECRET"

# substitutions:
#   # Define values for your non-secret build arguments here.
#   # "_" prefix is a convention for user-defined substitutions.
#   # Built-in substitutions like $PROJECT_ID, $COMMIT_SHA, $SHORT_SHA are also available
#   # and can be used in these values if needed (e.g., _APP_VERSION: '1.0-$SHORT_SHA').

#   # Plain Environment Variables:
#   _AUTH0_DOMAIN: "genai.atko.rocks"
#   _AUTH0_CLIENT_ID: "hTJH2emvkQTtAntzfzwXJ1EewJZNesL5"
#   _APP_BASE_URL: "https://chatbot.atko.rocks"

#   # Built-in substitutions you might find useful (Cloud Build provides these by default):
#   # _REGION: us-central1 # Example, if you need to pass the region. You can set this.
#   # _SERVICE_NAME: your-service-name # Example

# availableSecrets:
#   secretManager:
#     # Define each Secret Manager secret you need during the build.
#     # The 'env' key here specifies the environment variable name within the build step's environment,
#     # which then must match an entry in 'secretEnv' for the step, and the Docker --build-arg name.
#     - versionName: projects/$PROJECT_ID/secrets/a0-chatbot-client-secret/versions/latest
#       env: "AUTH0_CLIENT_SECRET"
#     - versionName: projects/$PROJECT_ID/secrets/a0-chatbot-encrypt-secret/versions/latest
#       env: "AUTH0_SECRET"
# # No 'images' section is explicitly needed in this cloudbuild.yaml when used with
# # "gcloud run deploy --source .". Cloud Build executes the steps, and "gcloud run deploy"
# # takes the resulting image from the build context and deploys it, managing the final
# # image storage in Artifact Registry (usually in a 'cloud-run-source-deploy' repository) or GCR.
